import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv("energy_consumption.csv")  # Ensure you have your dataset here

# Data preprocessing (Assuming columns: 'Time', 'Temperature', 'Humidity', 'Energy Consumption')
data['Time'] = pd.to_datetime(data['Time'])  # Convert time to datetime if needed
data['Hour'] = data['Time'].dt.hour  # Extract hour from the time for a better feature

# Handling missing data (if any)
data.fillna(data.mean(), inplace=True)

# Select features and target variable
X = data[['Hour', 'Temperature', 'Humidity']]  # Features
y = data['Energy Consumption']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

# Visualize the results
plt.figure(figsize=(10,6))
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Energy Consumption")
plt.ylabel("Predicted Energy Consumption")
plt.title("Actual vs Predicted Energy Consumption")
plt.show()

# Predict energy consumption for a new data point
new_data = np.array([[15, 25, 60]])  # Hour = 15, Temperature = 25, Humidity = 60
predicted_consumption = model.predict(new_data)
print(f"Predicted Energy Consumption: {predicted_consumption[0]}")

